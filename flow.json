[
    {
        "id": "1eb3b998484afdb2",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "92f6ad1d47157941",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2416549b999b3411",
        "type": "mqtt-broker",
        "name": "mosquitto.doesliverpool",
        "broker": "10.0.100.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c473abf39b500d02",
        "type": "mqtt in",
        "z": "1eb3b998484afdb2",
        "name": "",
        "topic": "esp8266/75D1F3/message",
        "qos": "2",
        "datatype": "auto",
        "broker": "2416549b999b3411",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a3532a7a4c72bf1f",
        "type": "http request",
        "z": "1eb3b998484afdb2",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.github.com/repos/goatchurchprime/tunnelvr_cave_data/contents/cavedata/firstarea/testnewfile.res",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 350,
        "y": 420,
        "wires": [
            [
                "508dc8e9d088c238"
            ]
        ]
    },
    {
        "id": "cb1dfcde.fd153",
        "type": "function",
        "z": "1eb3b998484afdb2",
        "name": "set payload and headers",
        "func": "msg.payload = \"\";\nmsg.headers = {};\nmsg.headers[\"Accept\"] = \"application/vnd.github.v3+json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 420,
        "wires": [
            [
                "a3532a7a4c72bf1f"
            ]
        ]
    },
    {
        "id": "dcf34aab.218928",
        "type": "inject",
        "z": "1eb3b998484afdb2",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "cb1dfcde.fd153"
            ]
        ]
    },
    {
        "id": "ee306582.f0dde8",
        "type": "debug",
        "z": "1eb3b998484afdb2",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 430,
        "y": 500,
        "wires": []
    },
    {
        "id": "508dc8e9d088c238",
        "type": "json",
        "z": "1eb3b998484afdb2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 460,
        "wires": [
            [
                "a2a7b12833919f82"
            ]
        ]
    },
    {
        "id": "a2a7b12833919f82",
        "type": "change",
        "z": "1eb3b998484afdb2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.content",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 460,
        "wires": [
            [
                "937efc70c64ec3c4"
            ]
        ]
    },
    {
        "id": "937efc70c64ec3c4",
        "type": "base64",
        "z": "1eb3b998484afdb2",
        "name": "",
        "action": "b64",
        "property": "payload",
        "x": 660,
        "y": 460,
        "wires": [
            [
                "ee306582.f0dde8"
            ]
        ]
    },
    {
        "id": "278fa0eb.43aed8",
        "type": "function",
        "z": "92f6ad1d47157941",
        "name": "broker def node",
        "func": "// pass in: msg.parameters.broker\n\nnode_type = \"mqtt-broker\";\nmsg.id = msg.id + 1;\n\nmsg.payload.push({\n        id: msg.id,\n        type: node_type,\n        broker: msg.parameters.broker,\n        port: \"1883\"\n      });\n\n// store the broker def ID so we can refer to it in the output node\nmsg.defs = {broker: msg.id,\n \t\t\t// how far apart are nodes horizontally\n     \t \tspacing: 150}; \n\n\nreturn msg;",
        "outputs": 1,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "15e5103c.e73b7"
            ]
        ]
    },
    {
        "id": "da8f9fca.854188",
        "type": "inject",
        "z": "92f6ad1d47157941",
        "name": "parameters",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "{\"broker\":\"localhost\",\"input\":\"source_topic\",\"output\":\"destination_topic\",\"process\":\"msg.payload = \\\"* \\\"+msg.payload+\\\" *\\\";\\nreturn msg;\"}",
        "payloadType": "str",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "50abf75f.4e47f8"
            ]
        ]
    },
    {
        "id": "50abf75f.4e47f8",
        "type": "function",
        "z": "92f6ad1d47157941",
        "name": "initialise",
        "func": "// create the parameters object from the incoming JSON object\nconsole.log(msg.payload);\nmsg.parameters = JSON.parse(msg.payload);\n\n// we're going to create an array of objects\nmsg.payload = [];\nmsg.id = 0;\n\nreturn msg;",
        "outputs": 1,
        "x": 260,
        "y": 300,
        "wires": [
            [
                "278fa0eb.43aed8"
            ]
        ]
    },
    {
        "id": "15e5103c.e73b7",
        "type": "function",
        "z": "92f6ad1d47157941",
        "name": "MQTT in node",
        "func": "// pass in msg.parameters.input\n\nnode_type = \"mqtt in\";\nprevious_id = msg.id;\n\nmsg.id = msg.id + 1;\n\nmsg.payload.push({\n        id: msg.id,\n        type: node_type,\n        topic: msg.parameters.input,\n        broker: msg.defs.broker,\n        name: \"input\",\n\t\tx: 100,\n\t\ty: 100,\n\t\twires: []\n      });\n\nreturn msg;",
        "outputs": 1,
        "x": 440,
        "y": 300,
        "wires": [
            [
                "5231e2ad.f01a3c"
            ]
        ]
    },
    {
        "id": "5231e2ad.f01a3c",
        "type": "function",
        "z": "92f6ad1d47157941",
        "name": "function node",
        "func": "// pass in msg.parameters.process\n\nnode_type = \"function\";\nprevious_id = msg.id;\n\nmsg.id = msg.id + 1;\n\n// fill in the wires link in previous node\nmsg.payload[msg.payload.length-1].wires.push([msg.id]);\nnew_x = msg.payload[msg.payload.length-1].x + msg.defs.spacing;\nnew_y = msg.payload[msg.payload.length-1].y;\n\nmsg.payload.push({\n        id: msg.id,\n        type: node_type,\n        name: \"process\",\n        func: msg.parameters.process,\n        outputs: 1,\n\t\tx: new_x,\n\t\ty: new_y,\n\t\twires: []\n      });\n\nreturn msg;",
        "outputs": 1,
        "x": 540,
        "y": 340,
        "wires": [
            [
                "8cf45583.109bf8"
            ]
        ]
    },
    {
        "id": "8cf45583.109bf8",
        "type": "function",
        "z": "92f6ad1d47157941",
        "name": "MQTT out node",
        "func": "// pass in msg.parameters.output\n \t\t   \n\nnode_type = \"mqtt out\";\nprevious_id = msg.id;\n\nmsg.id = msg.id + 1;\n\n// fill in the wires link in previous node\nmsg.payload[msg.payload.length-1].wires.push([msg.id]);\nnew_x = msg.payload[msg.payload.length-1].x + msg.defs.spacing;\nnew_y = msg.payload[msg.payload.length-1].y;\n\n\nmsg.payload.push({\n        id: msg.id,\n        type: node_type,\n        topic: msg.parameters.output,\n        broker: msg.defs.broker,\n        name: \"output\",\n\t\tx: new_x,\n\t\ty: new_y,\n\t\twires: []\n      });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 300,
        "wires": [
            [
                "a3f81690.493398"
            ]
        ]
    },
    {
        "id": "a3f81690.493398",
        "type": "debug",
        "z": "92f6ad1d47157941",
        "name": "",
        "active": true,
        "complete": "false",
        "x": 730,
        "y": 340,
        "wires": []
    },
    {
        "id": "485c51ed.6013b8",
        "type": "comment",
        "z": "92f6ad1d47157941",
        "name": "generate \"mqtt - process - mqtt\" flow",
        "info": "publish  to \"configure\" topic:\n\n{\n  \"broker\":\"localhost\",\n  \"input\":\"source_topic\",\n  \"output\":\"destination_topic\",\n  \"process\":\"msg.payload = \\\"* \\\"+msg.payload+\\\" *\\\";\\nreturn msg;\"\n}",
        "x": 440,
        "y": 260,
        "wires": []
    }
]